# VERA_Bot.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ + –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
import asyncio
import re
import sqlite3
import logging
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ================= –ù–ê–°–¢–†–û–ô–ö–ò =================
logging.basicConfig(level=logging.INFO)

TOKEN = "8425551477:AAFyt2EgdZ3vqx3wDy1YOSDXr2XpcmAeANk"
CHAT_ID = -4875403747
TIMEZONE = pytz.timezone("Europe/Moscow")
ADMINS = {"Arailon", "AndreyGrebeshchikov"}

DB_PATH = "guests.db"

# ================= –ë–ê–ó–ê =================
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS guests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            fullname TEXT,
            phone TEXT,
            email TEXT,
            source TEXT,
            note TEXT
        )
        """
    )
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            location TEXT,
            fullname TEXT,
            time TEXT,
            hours TEXT
        )
        """
    )
    conn.commit()
    conn.close()

# ================= –£–¢–ò–õ–ò–¢–´ =================
def normalize_phone(raw: str) -> str | None:
    digits = re.sub(r"\D", "", raw or "")
    if not digits:
        return None
    if digits.startswith("8"):
        digits = "7" + digits[1:]
    if not digits.startswith("7"):
        digits = "7" + digits
    if len(digits) != 11:
        return None
    return f"+7 {digits[1:4]} {digits[4:7]}-{digits[7:9]}-{digits[9:]}"

def is_admin(update: Update) -> bool:
    u = update.effective_user
    return bool(u and u.username and u.username in ADMINS)

# ================= –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø =================
async def send_message(app: Application, text: str):
    await app.bot.send_message(chat_id=CHAT_ID, text=text)

async def task_0830(app: Application):
    await send_message(app, "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —à—Ç–µ–Ω–¥–µ—Äüåø")

async def task_0900(app: Application):
    await send_message(
        app,
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞—Å—Å–∞ –æ—Ç–∫—Ä—ã—Ç–∞, —ç—Å–ø—Ä–µ—Å—Å–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, ice-gen –∏ —á–∞–π–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞—é—Ç, –º—É–∑—ã–∫–∞ –∏ —Å–≤–µ—Ç –µ—Å—Ç—å. "
        "–ò –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ—Å—å –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µüåøü§ó"
    )

async def task_1700(app: Application):
    await send_message(app, "–ó–∞–ø—Ä–æ—Å–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–¢–ë –∏ –°–±–µ—Ä –≤ –≥—Ä—É–ø–ø–µ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ")

async def task_1800(app: Application):
    await send_message(app, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–∫—Ä—ã—Ç–∏—é —Å–º–µ–Ω—ãüåø")

# ================= CONVERSATION: /guest =================
(FULLNAME, PHONE, EMAIL, SOURCE, NOTE, CONFIRM, SEARCH) = range(7)
(EDIT_FIELD, EDIT_VALUE) = range(7, 9)
(SCHEDULE_LOC, SCHEDULE_NAME, SCHEDULE_TIME, SCHEDULE_HOURS) = range(9, 13)

# ================= –ü–û–ò–°–ö –ì–û–°–¢–Ø =================
async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type not in ("group", "supergroup"):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return ConversationHandler.END

    await update.message.reply_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, email, —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –§–ò–û –≥–æ—Å—Ç—è.\n–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
    )
    return SEARCH

async def search_guest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if not text or text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    q = text.lower()
    digits_q = re.sub(r"\D", "", text)
    if digits_q.startswith("8"):
        digits_q = "7" + digits_q[1:]

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id, fullname, phone, email, source, note FROM guests ORDER BY id DESC")
    rows = cursor.fetchall()
    conn.close()

    results = []
    for row in rows:
        gid, fullname, phone, email, source, note = row
        full_text = " ".join([str(fullname or ""), str(email or ""), str(phone or "")]).lower()

        if "@" in text and email and q in (email or "").lower():
            results.append(row)
            continue

        if len(digits_q) >= 3:
            phone_digits = re.sub(r"\D", "", phone or "")
            if phone_digits.startswith("8"):
                phone_digits = "7" + phone_digits[1:]
            if digits_q in phone_digits:
                results.append(row)
                continue

        name_words = q.split()
        if fullname and all(w in fullname.lower() for w in name_words):
            results.append(row)
            continue

        if q in full_text:
            results.append(row)

    if not results:
        await update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    for row in results[:20]:
        gid, fullname, phone, email, source, note = row
        card = (
            f"üë§ {fullname or '‚Äî'}\n"
            f"üìû {phone or '‚Äî'}\n"
            f"üìß {email or '‚Äî'}\n"
            f"üìå {source or '‚Äî'}\n"
            f"üìù {note or '‚Äî'}\n"
            f"üÜî ID: {gid}"
        )
        kb = InlineKeyboardMarkup(
            [[
                InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{gid}"),
                InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{gid}")
            ]]
        )
        await update.message.reply_text(card, reply_markup=kb)

    return ConversationHandler.END

# ================= –£–ü–†–ê–í–õ–ï–ù–ò–ï –ì–û–°–¢–ï–ú =================
async def guest_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("edit_"):
        gid = int(data.split("_")[1])
        context.user_data["edit_id"] = gid
        kb = ReplyKeyboardMarkup(
            [["–§–ò–û", "–¢–µ–ª–µ—Ñ–æ–Ω"], ["Email", "–ò—Å—Ç–æ—á–Ω–∏–∫"], ["–ó–∞–º–µ—Ç–∫–∞"], ["–û—Ç–º–µ–Ω–∞"]],
            resize_keyboard=True,
        )
        await query.message.reply_text("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)
        return EDIT_FIELD

    if data.startswith("delete_"):
        gid = int(data.split("_")[1])
        kb = InlineKeyboardMarkup(
            [[
                InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirmdel_{gid}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="canceldel")
            ]]
        )
        await query.message.reply_text("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –≥–æ—Å—Ç—è?", reply_markup=kb)
        return ConversationHandler.END

    if data.startswith("confirmdel_"):
        gid = int(data.split("_")[1])
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("DELETE FROM guests WHERE id=?", (gid,))
        conn.commit()
        conn.close()
        await query.message.reply_text("‚úÖ –ì–æ—Å—Ç—å —É–¥–∞–ª—ë–Ω.")
        return ConversationHandler.END

    if data == "canceldel":
        await query.message.reply_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END

async def edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    field_map = {
        "—Ñ–∏–æ": "fullname",
        "—Ç–µ–ª–µ—Ñ–æ–Ω": "phone",
        "email": "email",
        "–∏—Å—Ç–æ—á–Ω–∏–∫": "source",
        "–∑–∞–º–µ—Ç–∫–∞": "note",
    }
    choice = update.message.text.lower()
    if choice == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    if choice not in field_map:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return EDIT_FIELD
    context.user_data["edit_field"] = field_map[choice]
    await update.message.reply_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è ¬´{choice}¬ª:", reply_markup=ReplyKeyboardRemove())
    return EDIT_VALUE

async def edit_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    gid = context.user_data.get("edit_id")
    field = context.user_data.get("edit_field")
    value = update.message.text.strip()
    if field == "phone":
        value = normalize_phone(value) or value
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(f"UPDATE guests SET {field}=? WHERE id=?", (value, gid))
    conn.commit()
    conn.close()
    await update.message.reply_text("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    return ConversationHandler.END

# ================= –†–ê–°–ü–ò–°–ê–ù–ò–ï =================
async def schedule_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    kb = InlineKeyboardMarkup(
        [[
            InlineKeyboardButton("üìç Prechistenskaya", callback_data="schedule_Prechistenskaya"),
            InlineKeyboardButton("üìç Komsomolsky", callback_data="schedule_Komsomolsky")
        ]]
    )
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª–∏–∞–ª:", reply_markup=kb)

async def schedule_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    loc = query.data.split("_")[1]
    context.user_data["schedule_loc"] = loc
    kb = ReplyKeyboardMarkup([["–î–æ–±–∞–≤–∏—Ç—å"], ["–ü–æ–∫–∞–∑–∞—Ç—å"], ["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    await query.message.reply_text(f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º {loc}:", reply_markup=kb)
    return SCHEDULE_LOC

async def schedule_loc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    loc = context.user_data.get("schedule_loc")
    if text == "–¥–æ–±–∞–≤–∏—Ç—å":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:")
        return SCHEDULE_NAME
    if text == "–ø–æ–∫–∞–∑–∞—Ç—å":
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT fullname, time, hours FROM schedule WHERE location=?", (loc,))
        rows = cursor.fetchall()
        conn.close()
        if not rows:
            await update.message.reply_text("üì≠ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ.")
        else:
            msg = "\n\n".join([f"üë§ {r[0]}\n‚è∞ {r[1]}\n‚åõ {r[2]}" for r in rows])
            await update.message.reply_text(f"üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {loc}:\n\n{msg}")
        return ConversationHandler.END
    if text == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    return SCHEDULE_LOC

async def schedule_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["sch_name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:00‚Äì18:00):")
    return SCHEDULE_TIME

async def schedule_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["sch_time"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã:")
    return SCHEDULE_HOURS

async def schedule_hours(update: Update, context: ContextTypes.DEFAULT_TYPE):
    loc = context.user_data.get("schedule_loc")
    name = context.user_data.get("sch_name")
    time = context.user_data.get("sch_time")
    hours = update.message.text.strip()
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("INSERT INTO schedule (location, fullname, time, hours) VALUES (?, ?, ?, ?)", (loc, name, time, hours))
    conn.commit()
    conn.close()
    await update.message.reply_text("‚úÖ –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    return ConversationHandler.END

# ================= –°–¢–ê–†–´–ï –•–ï–ù–î–õ–ï–†–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) =================
# (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Ç–≤–æ–∏ start_guest, fullname, phone, email, source, note, confirm, cancel, start_private, start_group, booking, menu, photos, contact, admin_menu, guest_list, error_handler, main ‚Äî —Å–º. —Ç–≤–æ–π –∫–æ–¥ –≤—ã—à–µ)

# ================= MAIN =================
async def main():
    init_db()

    app = Application.builder().token(TOKEN).build()
    app.add_error_handler(error_handler)

    # --- /start —Ä–∞–∑–¥–µ–ª—å–Ω–æ ---
    app.add_handler(CommandHandler("start", start_private, filters=filters.ChatType.PRIVATE))
    app.add_handler(CommandHandler("start", start_group, filters=filters.ChatType.GROUPS))

    # --- —Ñ—Ä–æ–Ω—Ç-–∫–Ω–æ–ø–∫–∏ ---
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.Regex("(?i)^–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫$"), booking))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.Regex("(?i)^–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é$"), menu))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.Regex("(?i)^–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏$"), photos))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.Regex("(?i)^–°–≤—è–∑–∞—Ç—å—Å—è —Å –±–∞—Ä–∏—Å—Ç–∞$"), contact))

    # --- admin ---
    app.add_handler(CommandHandler("admin", admin_menu))
    app.add_handler(MessageHandler(filters.ChatType.GROUPS & filters.Regex(r"(?i)^üïµÔ∏è–ê–¥–º–∏–Ω-–º–µ–Ω—é$"), admin_menu))
    app.add_handler(MessageHandler(filters.ChatType.GROUPS & filters.Regex("(?i)^–°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π$"), guest_list))
    app.add_handler(MessageHandler(filters.ChatType.GROUPS & filters.Regex("(?i)^–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ$"), schedule_menu))

    # --- –≥–æ—Å—Ç–∏ –ø–æ–∏—Å–∫ ---
    search_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.ChatType.GROUPS & filters.Regex(r"(?i)^üîç –ù–∞–π—Ç–∏ –≥–æ—Å—Ç—è$"), start_search)],
        states={SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_guest)]},
        fallbacks=[MessageHandler(filters.Regex("(?i)^–û—Ç–º–µ–Ω–∞$"), cancel_search)],
        allow_reentry=True,
    )
    app.add_handler(search_conv)

    # --- –≥–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ ---
    edit_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(guest_action, pattern="^(edit_|delete_|confirmdel_|canceldel)")],
        states={
            EDIT_FIELD: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_field)],
            EDIT_VALUE: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_value)],
        },
        fallbacks=[MessageHandler(filters.Regex("(?i)^–û—Ç–º–µ–Ω–∞$"), cancel)],
        map_to_parent={},
    )
    app.add_handler(edit_conv)

    # --- —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ---
    schedule_conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(schedule_action, pattern="^schedule_")],
        states={
            SCHEDULE_LOC: [MessageHandler(filters.TEXT & ~filters.COMMAND, schedule_loc)],
            SCHEDULE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, schedule_name)],
            SCHEDULE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, schedule_time)],
            SCHEDULE_HOURS: [MessageHandler(filters.TEXT & ~filters.COMMAND, schedule_hours)],
        },
        fallbacks=[MessageHandler(filters.Regex("(?i)^–û—Ç–º–µ–Ω–∞$"), cancel)],
    )
    app.add_handler(schedule_conv)

    # --- conversation /guest ---
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("guest", start_guest),
            MessageHandler(filters.ChatType.GROUPS & filters.Regex(r"(?i)^‚ûï–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è$"), start_guest),
        ],
        states={
            FULLNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, fullname)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, email)],
            SOURCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, source)],
            NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, note)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
        },
        fallbacks=[MessageHandler(filters.Regex(r"(?i)^–û—Ç–º–µ–Ω–∞$"), cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv_handler)

    # --- –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(task_0830, "cron", hour=8, minute=30, args=[app])
    scheduler.add_job(task_0900, "cron", hour=9, minute=0, args=[app])
    scheduler.add_job(task_1700, "cron", hour=17, minute=0, args=[app])
    scheduler.add_job(task_1800, "cron", hour=18, minute=0, args=[app])
    scheduler.start()

    await app.initialize()
    await app.start()
    await app.updater.start_polling()
    try:
        await asyncio.Event().wait()
    finally:
        await app.updater.stop()
        await app.stop()
        await app.shutdown()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            loop.create_task(main())
        else:
            raise