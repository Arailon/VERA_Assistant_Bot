import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

# üîë –¢–æ–∫–µ–Ω
API_TOKEN = "YOUR_TOKEN_HERE"

# üîê ID –∞–¥–º–∏–Ω–æ–≤
ADMINS = [123456789]

# üì¶ SQLite –±–∞–∑–∞
conn = sqlite3.connect("vera.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS bookings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    fullname TEXT,
    phone TEXT,
    datetime TEXT,
    source TEXT,
    notes TEXT
)
""")
conn.commit()

# ‚öôÔ∏è FSM –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
class BookingFSM(StatesGroup):
    fullname = State()
    phone = State()
    datetime = State()
    source = State()
    notes = State()

# ü§ñ –ë–æ—Ç
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())


# ========================== –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ==========================
def main_menu(is_admin=False):
    kb = [
        [KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫")],
        [KeyboardButton(text="üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é")],
        [KeyboardButton(text="üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")],
        [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")]
    ]
    if is_admin:
        kb.append([KeyboardButton(text="‚öô –ê–¥–º–∏–Ω –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


def contact_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë©‚Äçüíº –£–ø—Ä–∞–≤–ª—è—é—â–∞—è", url="https://t.me/manager_username")],
            [KeyboardButton(text="üë®‚Äçüç≥ –ë–∞—Ä–∏—Å—Ç–∞", url="https://t.me/barista_username")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
        ],
        resize_keyboard=True
    )


def admin_menu_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")],
            [KeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )


# ========================== –•–µ–Ω–¥–ª–µ—Ä—ã ==========================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    is_admin = message.from_user.id in ADMINS
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ñ–µ–π–Ω—é <b>VERA</b>! ‚òï\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=main_menu(is_admin)
    )


# ----------- –ì–æ—Å—Ç–µ–≤–æ–µ –º–µ–Ω—é -----------
@dp.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
async def contact_us(message: types.Message):
    await message.answer("–ö –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?", reply_markup=contact_kb())


@dp.message(F.text == "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é")
async def view_menu(message: types.Message):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –Ω–∞ —Å–∞–π—Ç–µ", url="https://example.com")],
            [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å", callback_data="menu_here")]
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:", reply_markup=kb)


@dp.message(F.text == "üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
async def view_photos(message: types.Message):
    await message.answer("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ–∑–∂–µ!")


# ----------- –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ -----------
@dp.message(F.text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫")
async def booking_start(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(BookingFSM.fullname)


@dp.message(BookingFSM.fullname)
async def booking_fullname(message: types.Message, state: FSMContext):
    await state.update_data(fullname=message.text)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(BookingFSM.phone)


@dp.message(BookingFSM.phone)
async def booking_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 28.08.2025 15:30):")
    await state.set_state(BookingFSM.datetime)


@dp.message(BookingFSM.datetime)
async def booking_datetime(message: types.Message, state: FSMContext):
    await state.update_data(datetime=message.text)
    await message.answer("üìå –£–∫–∞–∂–∏—Ç–µ, –æ—Ç–∫—É–¥–∞ –í—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å (Instagram, –¥—Ä—É–∑—å—è –∏ —Ç.–ø.):")
    await state.set_state(BookingFSM.source)


@dp.message(BookingFSM.source)
async def booking_source(message: types.Message, state: FSMContext):
    await state.update_data(source=message.text)
    await message.answer("üìù –î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ - –Ω–µ—Ç):")
    await state.set_state(BookingFSM.notes)


@dp.message(BookingFSM.notes)
async def booking_notes(message: types.Message, state: FSMContext):
    data = await state.get_data()
    fullname = data["fullname"]
    phone = data["phone"]
    datetime_val = data["datetime"]
    source = data["source"]
    notes = message.text

    cursor.execute("INSERT INTO bookings (fullname, phone, datetime, source, notes) VALUES (?, ?, ?, ?, ?)",
                   (fullname, phone, datetime_val, source, notes))
    conn.commit()

    await message.answer(
        f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
        f"üë§ <b>{fullname}</b>\n"
        f"üìû {phone}\n"
        f"üìÖ {datetime_val}\n"
        f"üìå {source}\n"
        f"üìù {notes}"
    )

    await state.clear()


# ----------- –ê–¥–º–∏–Ω –º–µ–Ω—é -----------
@dp.message(F.text == "‚öô –ê–¥–º–∏–Ω –º–µ–Ω—é")
async def admin_menu(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    await message.answer("‚öô –ê–¥–º–∏–Ω –º–µ–Ω—é", reply_markup=admin_menu_kb())


@dp.message(F.text == "üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
async def view_bookings(message: types.Message):
    cursor.execute("SELECT * FROM bookings")
    rows = cursor.fetchall()
    if not rows:
        return await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")

    for row in rows:
        booking_id, fullname, phone, datetime_val, source, notes = row
        text = (
            f"üîñ ID: {booking_id}\n"
            f"üë§ {fullname}\n"
            f"üìû {phone}\n"
            f"üìÖ {datetime_val}\n"
            f"üìå {source}\n"
            f"üìù {notes}"
        )
        await message.answer(text)


@dp.message(F.text == "‚úè –ò–∑–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def edit_booking(message: types.Message):
    cursor.execute("SELECT id, fullname, datetime FROM bookings")
    rows = cursor.fetchall()
    if not rows:
        return await message.answer("üì≠ –ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{r[0]} | {r[1]} ({r[2]})", callback_data=f"edit_{r[0]}")] for r in rows
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:", reply_markup=kb)


@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def delete_booking(message: types.Message):
    cursor.execute("SELECT id, fullname, datetime FROM bookings")
    rows = cursor.fetchall()
    if not rows:
        return await message.answer("üì≠ –ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{r[0]} | {r[1]} ({r[2]})", callback_data=f"delete_{r[0]}")] for r in rows
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)


@dp.callback_query(F.data.startswith("delete_"))
async def process_delete(call: types.CallbackQuery):
    booking_id = int(call.data.split("_")[1])
    cursor.execute("DELETE FROM bookings WHERE id=?", (booking_id,))
    conn.commit()
    await call.message.edit_text(f"‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID {booking_id} —É–¥–∞–ª–µ–Ω–æ.")


# ----------- –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é -----------
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu(message: types.Message):
    is_admin = message.from_user.id in ADMINS
    await message.answer("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu(is_admin))


# ========================== RUN ==========================
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())