# VERA_Bot.py (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ ‚Äî –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ä–µ–¥—ã —Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–º loop)
import asyncio
import re
import sqlite3
import logging
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# ================= –ù–ê–°–¢–†–û–ô–ö–ò =================
logging.basicConfig(level=logging.INFO)

TOKEN = "8425551477:AAFyt2EgdZ3vqx3wDy1YOSDXr2XpcmAeANk"
CHAT_ID = -4875403747
TIMEZONE = pytz.timezone("Europe/Moscow")
ADMINS = {"Arailon", "AndreyGrebeshchikov"}  # ‚Üê –ª–æ–≥–∏–Ω—ã –∞–¥–º–∏–Ω–æ–≤ –±–µ–∑ @

DB_PATH = "guests.db"

# ================= –ë–ê–ó–ê =================
def init_db():
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        """
        CREATE TABLE IF NOT EXISTS guests (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            fullname TEXT,
            phone TEXT,
            email TEXT,
            source TEXT,
            note TEXT
        )
        """
    )
    conn.commit()
    conn.close()

# ================= –£–¢–ò–õ–ò–¢–´ =================
def normalize_phone(raw: str) -> str | None:
    digits = re.sub(r"\D", "", raw or "")
    if not digits:
        return None
    if digits.startswith("8"):
        digits = "7" + digits[1:]
    if not digits.startswith("7"):
        digits = "7" + digits
    if len(digits) != 11:
        return None
    return f"+7 {digits[1:4]} {digits[4:7]}-{digits[7:9]}-{digits[9:]}"

def is_admin(update: Update) -> bool:
    u = update.effective_user
    return bool(u and u.username and u.username in ADMINS)

# ================= –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø =================
async def send_message(app: Application, text: str):
    await app.bot.send_message(chat_id=CHAT_ID, text=text)

async def task_0830(app: Application):
    await send_message(app, "–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —à—Ç–µ–Ω–¥–µ—Äüåø")

async def task_0900(app: Application):
    await send_message(
        app,
        "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞—Å—Å–∞ –æ—Ç–∫—Ä—ã—Ç–∞, —ç—Å–ø—Ä–µ—Å—Å–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, ice-gen –∏ —á–∞–π–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞—é—Ç, –º—É–∑—ã–∫–∞ –∏ —Å–≤–µ—Ç –µ—Å—Ç—å. "
        "–ò –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ—Å—å –ø–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µüåøü§ó"
    )

async def task_1700(app: Application):
    await send_message(app, "–ó–∞–ø—Ä–æ—Å–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –í–¢–ë –∏ –°–±–µ—Ä –≤ –≥—Ä—É–ø–ø–µ –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ")

async def task_1800(app: Application):
    await send_message(app, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–∫—Ä—ã—Ç–∏—é —Å–º–µ–Ω—ãüåø")

# ================= CONVERSATION: /guest (—Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ) =================
(FULLNAME, PHONE, EMAIL, SOURCE, NOTE, CONFIRM, SEARCH) = range(7)

# ================= –ü–û–ò–°–ö –ì–û–°–¢–Ø =================
async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∑–∞—â–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –≥—Ä—É–ø–ø–∞
    if update.message.chat.type not in ("group", "supergroup"):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return ConversationHandler.END

    await update.message.reply_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, email, —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –§–ò–û –≥–æ—Å—Ç—è.\n"
        "–ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω–æ. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
    )
    return SEARCH

async def search_guest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if not text:
        await update.message.reply_text("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å ‚Äî –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω, email –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é.")
        return SEARCH
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    q = text.lower()
    digits_q = re.sub(r"\D", "", text)

    if digits_q.startswith("8"):
        digits_q = "7" + digits_q[1:]

    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT id, fullname, phone, email, source, note FROM guests ORDER BY id DESC")
    rows = cursor.fetchall()
    conn.close()

    results = []
    for row in rows:
        gid, fullname, phone, email, source, note = row
        full_text = " ".join([str(fullname or ""), str(email or ""), str(phone or "")]).lower()

        if "@" in text:
            if email and q in (email or "").lower():
                results.append(row)
                continue

        if len(digits_q) >= 3:
            phone_digits = re.sub(r"\D", "", phone or "")
            if phone_digits.startswith("8"):
                phone_digits = "7" + phone_digits[1:]
            if digits_q in phone_digits:
                results.append(row)
                continue

        name_words = q.split()
        if fullname:
            fullname_l = fullname.lower()
            ok = all(w in fullname_l for w in name_words)
            if ok:
                results.append(row)
                continue

        if q in full_text:
            results.append(row)
            continue

    if not results:
        await update.message.reply_text("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    max_show = 20
    shown = 0
    for row in results:
        if shown >= max_show:
            break
        gid, fullname, phone, email, source, note = row
        card = (
            f"üë§ {fullname or '‚Äî'}\n"
            f"üìû {phone or '‚Äî'}\n"
            f"üìß {email or '‚Äî'}\n"
            f"üìå {source or '‚Äî'}\n"
            f"üìù {note or '‚Äî'}\n"
            f"üÜî ID: {gid}"
        )
        await update.message.reply_text(card)
        shown += 1

    if len(results) > max_show:
        await update.message.reply_text(f"–ü–æ–∫–∞–∑–∞–Ω–æ {max_show} –∏–∑ {len(results)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π. –£—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å—É–∂–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞.")

    await update.message.reply_text("", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def cancel_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ================= GUEST CONVERSATION =================
async def start_guest(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –∑–∞—â–∏—Ç–∞: —Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö
    if update.message.chat.type not in ("group", "supergroup"):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ.")
        return ConversationHandler.END

    context.user_data.clear()
    await update.message.reply_text(
        "–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –≥–æ—Å—Ç—è üéâ –í–≤–µ–¥–∏—Ç–µ –§–ò–û –≥–æ—Å—Ç—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω–æ–≤ –°–µ—Ä–≥–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á).",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
    )
    return FULLNAME

async def fullname(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (update.message.text or "").strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    fn = update.message.text.strip()
    if not fn or len(fn) < 3:
        await update.message.reply_text("‚ùå –ü–æ—Ö–æ–∂–µ –Ω–∞ –æ—à–∏–±–∫—É. –í–≤–µ–¥–∏—Ç–µ –§–ò–û –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
        return FULLNAME
    context.user_data["fullname"] = fn
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–ø—Ä–∏–º–µ—Ä: +7 915 123 45 67 –∏–ª–∏ 89151234567).",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
    )
    return PHONE

async def phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (update.message.text or "").strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    phone_fmt = normalize_phone(update.message.text)
    if not phone_fmt:
        await update.message.reply_text("‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return PHONE

    context.user_data["phone"] = phone_fmt
    await update.message.reply_text(
        f"–¢–µ–ª–µ—Ñ–æ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {phone_fmt} ‚úÖ\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ e-mail (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª).",
        reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"], ["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
    )
    return EMAIL

async def email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)

    if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        context.user_data["email"] = None
    else:
        if not re.match(r"^[^@\s]+@[^@\s]+\.[^@\s]+$", text):
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.")
            return EMAIL
        context.user_data["email"] = text

    await update.message.reply_text("–û—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –≥–æ—Å—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: Instagram, –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è, –£–ª–∏—Ü–∞)")
    return SOURCE

async def source(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (update.message.text or "").strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    context.user_data["source"] = update.message.text.strip()
    await update.message.reply_text(
        "–ó–∞–º–µ—Ç–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å). –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.",
        reply_markup=ReplyKeyboardMarkup([["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"], ["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
    )
    return NOTE

async def note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    txt = (update.message.text or "").strip()
    if txt.lower() == "–æ—Ç–º–µ–Ω–∞":
        return await cancel(update, context)
    context.user_data["note"] = None if txt.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else txt

    d = context.user_data
    text = (
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"üë§ –§–ò–û: {d.get('fullname','‚Äî')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {d.get('phone','‚Äî')}\n"
        f"üìß E-mail: {d.get('email','‚Äî') or '‚Äî'}\n"
        f"üìå –ò—Å—Ç–æ—á–Ω–∏–∫: {d.get('source','‚Äî')}\n"
        f"üìù –ó–∞–º–µ—Ç–∫–∞: {d.get('note','‚Äî') or '‚Äî'}\n\n"
        "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ—Å—Ç—è?"
    )
    await update.message.reply_text(
        text,
        reply_markup=ReplyKeyboardMarkup([["–î–∞"], ["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
    )
    return CONFIRM

async def confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if (update.message.text or "").strip().lower() != "–¥–∞":
        await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END

    d = context.user_data
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO guests (fullname, phone, email, source, note) VALUES (?, ?, ?, ?, ?)",
        (d.get("fullname"), d.get("phone"), d.get("email"), d.get("source"), d.get("note")),
    )
    conn.commit()
    conn.close()

    await update.message.reply_text(
        "‚úÖ –ì–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:\n\n"
        f"üë§ {d.get('fullname')}\n"
        f"üìû {d.get('phone')}\n"
        f"üìß {d.get('email','‚Äî') or '‚Äî'}\n"
        f"üìå {d.get('source','‚Äî')}\n"
        f"üìù {d.get('note','‚Äî') or '‚Äî'}\n",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# ================= /start: –õ–° –∏ –ì–†–£–ü–ü–ê —Ä–∞–∑–¥–µ–ª—å–Ω–æ =================
async def start_private(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [["–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫"], ["–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é"], ["–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"], ["–°–≤—è–∑–∞—Ç—å—Å—è —Å –±–∞—Ä–∏—Å—Ç–∞"]]
    await update.message.reply_text(
        f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {update.effective_user.first_name}! üëã\n"
        "–Ø –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ—Ñ–µ–π–Ω–∏ VERA. –ß—Ç–æ –í–∞–º –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
    )

async def start_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        ["‚ûï–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è"],
        ["üìã –°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π"],
        ["üîç –ù–∞–π—Ç–∏ –≥–æ—Å—Ç—è"],
        ["üïµÔ∏è–ê–¥–º–∏–Ω-–º–µ–Ω—é"]
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ—Ñ–µ–π–Ω–∏ VERA. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True),
    )

# ================= FRONT =================
async def booking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìÖ –ù–∞–ø–∏—à–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –±—Ä–æ–Ω–∏.")

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìñ –ú–µ–Ω—é: https://your-menu-link")

async def photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: https://your-photos-link")

async def contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìû –¢–µ–ª–µ—Ñ–æ–Ω –±–∞—Ä–∏—Å—Ç–∞: +7 XXX XXX-XX-XX")

# ================= ADMIN =================
async def admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    kb = [["–°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π"], ["–û—Ç–º–µ–Ω–∞"]]
    await update.message.reply_text("–ê–¥–º–∏–Ω-–º–µ–Ω—é:", reply_markup=ReplyKeyboardMarkup(kb, resize_keyboard=True))

async def guest_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_admin(update):
        return

    u = update.effective_user
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute("SELECT fullname, phone, email, source, note FROM guests ORDER BY id DESC")
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        try:
            await context.bot.send_message(chat_id=u.id, text="üì≠ –ì–æ—Å—Ç–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        except Exception:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É —Å–Ω–∞—á–∞–ª–∞, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    chunk = []
    total_texts = []
    for row in rows:
        chunk.append(
            f"üë§ {row[0]}\n"
            f"üìû {row[1]}\n"
            f"üìß {row[2] or '‚Äî'}\n"
            f"üìå {row[3] or '‚Äî'}\n"
            f"üìù {row[4] or '‚Äî'}\n"
        )
        if len(chunk) == 20:
            total_texts.append("\n".join(chunk))
            chunk = []
    if chunk:
        total_texts.append("\n".join(chunk))

    try:
        for part in total_texts:
            await context.bot.send_message(chat_id=u.id, text="üìã –°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π:\n\n" + part)
    except Exception:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–∫—É —Å–Ω–∞—á–∞–ª–∞, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è.")

# ================= –û–®–ò–ë–ö–ò =================
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.exception("Exception while handling an update:", exc_info=context.error)

# ================= MAIN =================
async def main():
    init_db()

    app = Application.builder().token(TOKEN).build()
    app.add_error_handler(error_handler)

    # --- /start —Ä–∞–∑–¥–µ–ª—å–Ω–æ ---
    app.add_handler(CommandHandler("start", start_private, filters=filters.ChatType.PRIVATE))
    app.add_handler(CommandHandler("start", start_group, filters=filters.ChatType.GROUPS))

    # --- —Ñ—Ä–æ–Ω—Ç-–∫–Ω–æ–ø–∫–∏ (–ª–∏—á–∫–∞) ---
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.Regex("(?i)^–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫$"), booking))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.Regex("(?i)^–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é$"), menu))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.Regex("(?i)^–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏$"), photos))
    app.add_handler(MessageHandler(filters.ChatType.PRIVATE & filters.Regex("(?i)^–°–≤—è–∑–∞—Ç—å—Å—è —Å –±–∞—Ä–∏—Å—Ç–∞$"), contact))

    # --- admin ---
    app.add_handler(CommandHandler("admin", admin_menu))
    app.add_handler(MessageHandler(filters.ChatType.GROUPS & filters.Regex(r"(?i)^üïµÔ∏è–ê–¥–º–∏–Ω-–º–µ–Ω—é$"), admin_menu))
    app.add_handler(MessageHandler(filters.ChatType.GROUPS & filters.Regex("(?i)^–°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π$"), guest_list))

    # --- conversation: –ø–æ–∏—Å–∫ –≥–æ—Å—Ç–µ–π ---
    search_conv = ConversationHandler(
        entry_points=[
            MessageHandler(filters.ChatType.GROUPS & filters.Regex(r"(?i)^üîç –ù–∞–π—Ç–∏ –≥–æ—Å—Ç—è$"), start_search),
        ],
        states={
            SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_guest)],
        },
        fallbacks=[
            MessageHandler(filters.Regex("(?i)^–û—Ç–º–µ–Ω–∞$"), cancel_search),
            CommandHandler("cancel", cancel_search),
        ],
        allow_reentry=True,
    )
    app.add_handler(search_conv)

    # --- conversation /guest (—Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö) ---
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("guest", start_guest),
            MessageHandler(filters.ChatType.GROUPS & filters.Regex(r"(?i)^‚ûï–î–æ–±–∞–≤–∏—Ç—å –≥–æ—Å—Ç—è$"), start_guest),
        ],
        states={
            FULLNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, fullname)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, phone)],
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, email)],
            SOURCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, source)],
            NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, note)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm)],
        },
        fallbacks=[MessageHandler(filters.Regex(r"(?i)^–û—Ç–º–µ–Ω–∞$"), cancel), CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv_handler)

    # --- –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–æ–º –∂–µ event loop) ---
    scheduler = AsyncIOScheduler(timezone=TIMEZONE)
    scheduler.add_job(task_0830, "cron", hour=8, minute=30, args=[app])
    scheduler.add_job(task_0900, "cron", hour=9, minute=0, args=[app])
    scheduler.add_job(task_1700, "cron", hour=17, minute=0, args=[app])
    scheduler.add_job(task_1800, "cron", hour=18, minute=0, args=[app])
    scheduler.start()

    # --- –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç run_until_complete) ---
    await app.initialize()
    await app.start()
    await app.updater.start_polling()

    try:
        # –¥–µ—Ä–∂–∏–º –∑–∞–¥–∞—á—É –∂–∏–≤–æ–π –ø–æ–∫–∞ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤—è—Ç (Ctrl+C / SIGTERM)
        await asyncio.Event().wait()
    finally:
        # –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π shutdown
        await app.updater.stop()
        await app.stop()
        await app.shutdown()

if __name__ == "__main__":
    # –û–±—ã—á–Ω—ã–π –∑–∞–ø—É—Å–∫
    try:
        asyncio.run(main())
    except RuntimeError as e:
        # –ï—Å–ª–∏ loop —É–∂–µ –∑–∞–ø—É—â–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ VSCode debugpy), –∑–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º main –≤ —Ç–µ–∫—É—â–µ–º loop
        loop = asyncio.get_event_loop()
        if loop.is_running():
            loop.create_task(main())
        else:
            raise