import re
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

API_TOKEN = "YOUR_BOT_TOKEN"

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher()


# ---------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------
def main_menu():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫")],
            [KeyboardButton(text="üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é")],
            [KeyboardButton(text="üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")],
            [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")]
        ],
        resize_keyboard=True
    )
    return kb


# ---------- /start ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ñ–µ–π–Ω—é <b>VERA</b>! ‚òï\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )


# ---------- –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ----------
@dp.message(F.text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫")
async def booking_start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>12.09 18:30</i>):")


def normalize_datetime(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –µ–¥–∏–Ω—ã–π –≤–∏–¥: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú"""
    text = text.strip()
    
    # –ó–∞–º–µ–Ω–∏–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–∞ –ø—Ä–æ–±–µ–ª
    text = re.sub(r"[\/\.:-]", " ", text)

    parts = text.split()
    date, time = None, None

    # –î–∞—Ç–∞
    if len(parts) >= 2:
        date = parts[0]
        time = parts[1]
    elif len(parts) == 1:
        if ":" in parts[0] or len(parts[0]) in [4]:  # 1830 ‚Üí 18:30
            time = parts[0]
        else:
            date = parts[0]

    # –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    if time:
        time = re.sub(r"(\d{1,2})(\d{2})", r"\1:\2", time) if time.isdigit() else time

    # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    if date:
        d = re.findall(r"\d+", date)
        if len(d) == 2:
            day, month = d
            date = f"{day.zfill(2)}.{month.zfill(2)}.2025"
        elif len(d) == 3:
            day, month, year = d
            date = f"{day.zfill(2)}.{month.zfill(2)}.{year}"
    
    return f"{date or '??.??.????'} {time or '??:??'}"


@dp.message()
async def handle_booking_input(message: types.Message):
    if any(word in message.text for word in ["–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", "—Å—Ç–æ–ª", "–º–µ—Å—Ç–æ"]):
        return  # —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏–ª–æ —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    normalized = normalize_datetime(message.text)
    if "??" not in normalized:
        await message.answer(f"–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: <b>{normalized}</b>\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ‚úÖ")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


# ---------- –ú–µ–Ω—é ----------
@dp.message(F.text == "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é")
async def show_menu(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –Ω–∞ —Å–∞–π—Ç–µ", url="https://example.com")],
        [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å", callback_data="menu_here")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é:", reply_markup=kb)


@dp.callback_query(F.data == "menu_here")
async def menu_here(callback: types.CallbackQuery):
    await callback.message.answer("üìã –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –ø–æ—è–≤–∏—Ç—Å—è –º–µ–Ω—é.")


# ---------- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ----------
@dp.message(F.text == "üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
async def show_photos(message: types.Message):
    await message.answer("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.")


# ---------- –ö–æ–Ω—Ç–∞–∫—Ç—ã ----------
@dp.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
async def contacts(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë© –£–ø—Ä–∞–≤–ª—è—é—â–∞—è", url="https://t.me/username1")],
        [InlineKeyboardButton(text="üë®‚Äçü¶± –ë–∞—Ä–∏—Å—Ç–∞", url="https://t.me/username2")]
    ])
    await message.answer("–ö –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?", reply_markup=kb)


# ---------- –ó–∞–ø—É—Å–∫ ----------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())