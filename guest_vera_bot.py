import re
import sqlite3
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage


API_TOKEN = "YOUR_BOT_TOKEN"
ADMINS = [111111111, 222222222]  # —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å Telegram ID –∞–¥–º–∏–Ω–æ–≤

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())


# ---------- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ----------
def init_db():
    conn = sqlite3.connect("vera.db")
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS bookings (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        fullname TEXT,
        phone TEXT,
        source TEXT,
        note TEXT,
        datetime TEXT
    )
    """)
    conn.commit()
    conn.close()

def add_booking(user_id: int, fullname: str, phone: str, source: str, note: str, datetime_str: str):
    conn = sqlite3.connect("vera.db")
    cursor = conn.cursor()
    cursor.execute("""
    INSERT INTO bookings (user_id, fullname, phone, source, note, datetime)
    VALUES (?, ?, ?, ?, ?, ?)
    """, (user_id, fullname, phone, source, note, datetime_str))
    conn.commit()
    conn.close()

def get_bookings():
    conn = sqlite3.connect("vera.db")
    cursor = conn.cursor()
    cursor.execute("SELECT id, fullname, phone, datetime FROM bookings ORDER BY id DESC")
    rows = cursor.fetchall()
    conn.close()
    return rows

def delete_booking(booking_id: int):
    conn = sqlite3.connect("vera.db")
    cursor = conn.cursor()
    cursor.execute("DELETE FROM bookings WHERE id=?", (booking_id,))
    conn.commit()
    conn.close()


# ---------- FSM ----------
class BookingFSM(StatesGroup):
    fullname = State()
    phone = State()
    source = State()
    note = State()
    datetime = State()


# ---------- –ö–Ω–æ–ø–∫–∏ ----------
def main_menu(is_admin=False):
    kb = [
        [KeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫")],
        [KeyboardButton(text="üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é")],
        [KeyboardButton(text="üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")],
        [KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")]
    ]
    if is_admin:
        kb.append([KeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def back_cancel_kb():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )


# ---------- /start ----------
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    is_admin = message.from_user.id in ADMINS
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ñ–µ–π–Ω—é <b>VERA</b>! ‚òï\n"
        "–î–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—á–Ω—ë–º —Å –í–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è:",
        reply_markup=back_cancel_kb()
    )
    await dp.fsm.set_state(message.chat.id, BookingFSM.fullname)


# ---------- FSM —à–∞–≥–∏ ----------
@dp.message(BookingFSM.fullname)
async def process_fullname(message: types.Message, state: FSMContext):
    if message.text in ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        await state.clear()
        await message.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id in ADMINS))
        return
    await state.update_data(fullname=message.text)
    await message.answer("üì± –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_cancel_kb())
    await state.set_state(BookingFSM.phone)

@dp.message(BookingFSM.phone)
async def process_phone(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id in ADMINS))
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(BookingFSM.fullname)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:", reply_markup=back_cancel_kb())
        return
    await state.update_data(phone=message.text)
    await message.answer("üåê –û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?", reply_markup=back_cancel_kb())
    await state.set_state(BookingFSM.source)

@dp.message(BookingFSM.source)
async def process_source(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id in ADMINS))
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(BookingFSM.phone)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=back_cancel_kb())
        return
    await state.update_data(source=message.text)
    await message.answer("üìù –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π):", reply_markup=back_cancel_kb())
    await state.set_state(BookingFSM.note)

@dp.message(BookingFSM.note)
async def process_note(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id in ADMINS))
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(BookingFSM.source)
        await message.answer("–û—Ç–∫—É–¥–∞ –≤—ã —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å?", reply_markup=back_cancel_kb())
        return
    await state.update_data(note=message.text)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 12.09 18:30):", reply_markup=back_cancel_kb())
    await state.set_state(BookingFSM.datetime)


def normalize_datetime(text: str) -> str:
    text = text.strip()
    text = re.sub(r"[\/\.:-]", " ", text)
    parts = text.split()
    date, time = None, None

    if len(parts) >= 2:
        date, time = parts[0], parts[1]
    elif len(parts) == 1:
        if ":" in parts[0] or len(parts[0]) in [4]:
            time = parts[0]
        else:
            date = parts[0]

    if time:
        time = re.sub(r"(\d{1,2})(\d{2})", r"\1:\2", time) if time.isdigit() else time

    if date:
        d = re.findall(r"\d+", date)
        if len(d) == 2:
            day, month = d
            date = f"{day.zfill(2)}.{month.zfill(2)}.2025"
        elif len(d) == 3:
            day, month, year = d
            date = f"{day.zfill(2)}.{month.zfill(2)}.{year}"

    return f"{date or '??.??.????'} {time or '??:??'}"


@dp.message(BookingFSM.datetime)
async def process_datetime(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å":
        await state.clear()
        await message.answer("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu(message.from_user.id in ADMINS))
        return
    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await state.set_state(BookingFSM.note)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ:", reply_markup=back_cancel_kb())
        return

    normalized = normalize_datetime(message.text)
    if "??" in normalized:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    data = await state.get_data()
    add_booking(
        message.from_user.id,
        data["fullname"],
        data["phone"],
        data["source"],
        data["note"],
        normalized
    )
    await state.clear()
    await message.answer(
        f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
        f"üë§ {data['fullname']}\n"
        f"üì± {data['phone']}\n"
        f"üåê {data['source']}\n"
        f"üìù {data['note']}\n"
        f"üìÖ {normalized}",
        reply_markup=main_menu(message.from_user.id in ADMINS)
    )


# ---------- –ú–µ–Ω—é ----------
@dp.message(F.text == "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é")
async def show_menu(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –Ω–∞ —Å–∞–π—Ç–µ", url="https://example.com")],
        [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å", callback_data="menu_here")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–Ω—é:", reply_markup=kb)

@dp.callback_query(F.data == "menu_here")
async def menu_here(callback: types.CallbackQuery):
    await callback.message.answer("üìã –ó–¥–µ—Å—å –ø–æ–∑–∂–µ –ø–æ—è–≤–∏—Ç—Å—è –º–µ–Ω—é.")


# ---------- –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ ----------
@dp.message(F.text == "üì∏ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
async def show_photos(message: types.Message):
    await message.answer("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.")


# ---------- –ö–æ–Ω—Ç–∞–∫—Ç—ã ----------
@dp.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
async def contacts(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë© –£–ø—Ä–∞–≤–ª—è—é—â–∞—è", url="https://t.me/username1")],
        [InlineKeyboardButton(text="üë®‚Äçü¶± –ë–∞—Ä–∏—Å—Ç–∞", url="https://t.me/username2")]
    ])
    await message.answer("–ö –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?", reply_markup=kb)


# ---------- –ê–¥–º–∏–Ω –º–µ–Ω—é ----------
@dp.message(F.text == "üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é")
async def admin_menu(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")],
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer("üõ† –ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=kb)


@dp.message(F.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
async def view_bookings(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    bookings = get_bookings()
    if not bookings:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.")
        return
    text = "\n".join([f"#{b[0]} üë§ {b[1]} üì± {b[2]} üìÖ {b[3]}" for b in bookings])
    await message.answer(text)


@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
async def delete_booking_start(message: types.Message):
    if message.from_user.id not in ADMINS:
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

@dp.message(lambda m: m.text.isdigit() and m.from_user.id in ADMINS)
async def delete_booking_admin(message: types.Message):
    booking_id = int(message.text)
    delete_booking(booking_id)
    await message.answer(f"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id} —É–¥–∞–ª–µ–Ω–æ.")


# ---------- –ó–∞–ø—É—Å–∫ ----------
async def main():
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
    