import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

# üîë –¢–æ–∫–µ–Ω
API_TOKEN = "8425551477:AAHfzN4dWpK2gE8Qo6hO152ozSvAqr71VuQ"

# üîê ID –∞–¥–º–∏–Ω–æ–≤
ADMINS = [1077878777, 185307580, 1084846454, 878808566]

# üì¶ SQLite –±–∞–∑–∞
conn = sqlite3.connect("vera.db")
conn.row_factory = sqlite3.Row
cursor = conn.cursor()

# –¢–∞–±–ª–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
cursor.execute("""
CREATE TABLE IF NOT EXISTS bookings (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    fullname TEXT,
    phone TEXT,
    datetime TEXT,
    source TEXT,
    notes TEXT
)
""")
# –¢–∞–±–ª–∏—Ü–∞ –º–µ–Ω—é
cursor.execute("""
CREATE TABLE IF NOT EXISTS menu_items (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    description TEXT DEFAULT '',
    price REAL DEFAULT 0,
    category TEXT DEFAULT '–ï–¥–∞',
    is_active INTEGER DEFAULT 1
)
""")
conn.commit()

# seed menu (–µ—Å–ª–∏ –ø—É—Å—Ç–æ)
cursor.execute("SELECT COUNT(*) AS c FROM menu_items")
if cursor.fetchone()["c"] == 0:
    items = [
        ("–¢–æ—Å—Ç —Å –≤–µ—Ç—á–∏–Ω–æ–π –∏ —Å—ã—Ä–æ–º", "–•—Ä—É—Å—Ç—è—â–∏–π —Ç–æ—Å—Ç —Å –≤–µ—Ç—á–∏–Ω–æ–π –∏ –ø–ª–∞–≤–ª–µ–Ω—ã–º —Å—ã—Ä–æ–º", 290, "–ï–¥–∞"),
        ("Veggie Bowl", "–û–≤–æ—â–Ω–æ–π –±–æ—É–ª —Å —Å–æ—É—Å–æ–º", 350, "–ï–¥–∞"),
        ("–ö–µ—Ç–æ-–±–µ–π–≥–ª", "–ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω—ã–π –±–µ–π–≥–ª", 320, "–ï–¥–∞"),
        ("–ë—Ä–∏–æ—à—å —Å –ø–∞—Å—Ç—Ä–∞–º–∏", "–ù–µ–∂–Ω–∞—è –±—Ä–∏–æ—à—å —Å –ø–∞—Å—Ç—Ä–∞–º–∏", 420, "–ï–¥–∞"),
    ]
    cursor.executemany("INSERT INTO menu_items(title, description, price, category) VALUES(?,?,?,?)", items)
    conn.commit()

# ‚öôÔ∏è FSM –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
class BookingFSM(StatesGroup):
    fullname = State()
    phone = State()
    datetime = State()
    source = State()
    notes = State()

# ‚öôÔ∏è FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
class EditBookingFSM(StatesGroup):
    fullname = State()
    phone = State()
    datetime = State()
    source = State()
    notes = State()

# ‚öôÔ∏è FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–Ω—é
class EditMenuFSM(StatesGroup):
    waiting_field = State()
    waiting_value = State()

# ü§ñ –ë–æ—Ç
bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher(storage=MemoryStorage())

# ========================== Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ==========================
def main_menu_inline(is_admin: bool = False) -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(text="üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫", callback_data="main_book")],
        [InlineKeyboardButton(text="üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é", callback_data="main_menu")],
        [InlineKeyboardButton(text="üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", callback_data="main_photos")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="main_contact")],
    ]
    if is_admin:
        kb.append([InlineKeyboardButton(text="‚öôÔ∏è –ê–¥–º–∏–Ω –º–µ–Ω—é", callback_data="main_admin")])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def contact_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë©‚Äçüíº –£–ø—Ä–∞–≤–ª—è—é—â–∞—è", url="https://t.me/AnnaBardo_nova")],
            [InlineKeyboardButton(text="üë®‚Äçüç≥ –ë–∞—Ä–∏—Å—Ç–∞", url="https://t.me/Arailon")],
            [InlineKeyboardButton(text="üë®‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", url="https://t.me/Arailon")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
        ]
    )

def admin_menu_inline() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", callback_data="adm_view_bookings")],
            [InlineKeyboardButton(text="üçΩ –ú–µ–Ω—é (—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)", callback_data="adm_menu_manage")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")],
        ]
    )

def bookings_item_kb(bid: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{bid}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"askdel_{bid}")
        ]
    ])

def confirm_del_kb(bid: int, return_to: str = None) -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{bid}")],
        [InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data=return_to or "adm_view_bookings")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
BOOK_ORDER = ["fullname", "phone", "datetime", "source", "notes"]
PREV = {step: (BOOK_ORDER[i-1] if i > 0 else None) for i, step in enumerate(BOOK_ORDER)}

def nav_kb(step: str, allow_skip: bool = False) -> InlineKeyboardMarkup:
    row = [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data=f"book_back_{step}")]
    if allow_skip:
        row.append(InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"book_skip_{step}"))
    kb = [row, [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="book_cancel")]]
    return InlineKeyboardMarkup(inline_keyboard=kb)

# ========================== –ü–æ–º–æ—â–Ω–∏–∫–∏ ==========================
async def _ask_step(message_or_call, state: FSMContext, step: str):
    prompts = {
        "fullname": "–î–∞–≤–∞–π—Ç–µ –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
        "phone": "üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        "datetime": "üìÖ –ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –Ω–∞—Å –ø–æ—Å–µ—Ç–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 28.08 15:30):",
        "source": "üìå –û—Ç–∫—É–¥–∞ —É–∑–Ω–∞–ª–∏ –æ –Ω–∞—Å? (Instagram, –¥—Ä—É–∑—å—è –∏ —Ç.–ø.):",
        "notes": "üìù –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:",
    }
    allow_skip = step in ("source", "notes")
    await state.set_state(getattr(BookingFSM, step))
    text = prompts[step]
    kb = nav_kb(step, allow_skip=allow_skip)

    if isinstance(message_or_call, types.CallbackQuery):
        await message_or_call.message.edit_text(text, reply_markup=kb)
    else:
        await message_or_call.answer(text, reply_markup=kb)

async def _save_booking_and_finish(event: types.Message | types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    fullname = data.get("fullname", "")
    phone = data.get("phone", "")
    datetime_val = data.get("datetime", "")
    source = data.get("source", "")
    notes = data.get("notes", "")

    cursor.execute(
        "INSERT INTO bookings (fullname, phone, datetime, source, notes) VALUES (?, ?, ?, ?, ?)",
        (fullname, phone, datetime_val, source, notes)
    )
    conn.commit()

    text = (f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            f"üë§ <b>{fullname}</b>\n"
            f"üìû {phone}\n"
            f"üìÖ {datetime_val}\n"
            f"üìå {source}\n"
            f"üìù {notes}")

    if isinstance(event, types.CallbackQuery):
        await event.message.edit_text(text, reply_markup=main_menu_inline(event.from_user.id in ADMINS))
    else:
        await event.answer(text)
        await event.answer("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_inline(event.from_user.id in ADMINS))

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                admin_id,
                f"üåø <b>–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!</b> üåø\n\n"
                f"üë§ {fullname}\n"
                f"üìû {phone}\n"
                f"üìÖ {datetime_val}\n"
                f"üìå {source}\n"
                f"üìù {notes}"
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await state.clear()

# ========================== –•–µ–Ω–¥–ª–µ—Ä—ã ==========================
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    is_admin = message.from_user.id in ADMINS
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ñ–µ–π–Ω—é <b>VERA</b>! ‚òïÔ∏è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=main_menu_inline(is_admin)
    )

# ---------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é / –∫–æ–Ω—Ç–∞–∫—Ç—ã / —Ñ–æ—Ç–æ ----------
@dp.callback_query(F.data == "main_contact")
async def contact_us_cb(call: types.CallbackQuery):
    await call.message.edit_text("–ö –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?", reply_markup=contact_kb())

@dp.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏")
async def contact_us_msg(message: types.Message):
    await message.answer("–ö –∫–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è?", reply_markup=contact_kb())

@dp.callback_query(F.data == "back_main")
async def back_main_cb(call: types.CallbackQuery):
    is_admin = call.from_user.id in ADMINS
    await call.message.edit_text("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_inline(is_admin))

@dp.callback_query(F.data == "main_photos")
async def main_photos_cb(call: types.CallbackQuery):
    await call.message.edit_text("üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ–∑–∂–µ!", reply_markup=main_menu_inline(call.from_user.id in ADMINS))

# ---------- –ú–µ–Ω—é (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏) ----------
@dp.callback_query(F.data == "main_menu")
async def show_menu_categories(call: types.CallbackQuery):
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="ü•ó –ï–¥–∞", callback_data="menu_cat_–ï–¥–∞")],
            [InlineKeyboardButton(text="üçπ –ù–∞–ø–∏—Ç–∫–∏", callback_data="menu_cat_–ù–∞–ø–∏—Ç–∫–∏")],
            [InlineKeyboardButton(text="üç∞ –î–µ—Å–µ—Ä—Ç—ã", callback_data="menu_cat_–î–µ—Å–µ—Ä—Ç—ã")],
            [InlineKeyboardButton(text="üåê –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —Å–∞–π—Ç–µ", url="https://veracoffeetea.com/?ysclid=mesnxzcdcm560404876")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
        ]
    )
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–Ω—é:", reply_markup=kb)

@dp.callback_query(F.data.startswith("menu_cat_"))
async def show_menu_by_category(call: types.CallbackQuery):
    category = call.data.split("menu_cat_", 1)[1]
    cursor.execute("SELECT id, title, price FROM menu_items WHERE category=? AND is_active=1 ORDER BY id DESC", (category,))
    rows = cursor.fetchall()
    if not rows:
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]])
        return await call.message.edit_text(f"–í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ¬´{category}¬ª –ø–æ–∫–∞ –ø—É—Å—Ç–æ.", reply_markup=kb)

    kb_rows = [[InlineKeyboardButton(text=f"{r['title']} ‚Äî {int(r['price'])} ‚ÇΩ", callback_data=f"menu_item_{r['id']}")] for r in rows]
    kb_rows.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    await call.message.edit_text(f"üìã <b>{category}</b>:", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb_rows))

@dp.callback_query(F.data.startswith("menu_item_"))
async def open_menu_item(call: types.CallbackQuery):
    item_id = int(call.data.split("_")[-1])
    cursor.execute("SELECT * FROM menu_items WHERE id=?", (item_id,))
    row = cursor.fetchone()
    if not row:
        return await call.answer("–ë–ª—é–¥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
    is_admin = call.from_user.id in ADMINS
    text = (f"üçΩ <b>{row['title']}</b>\n"
            f"{row['description']}\n"
            f"üí∞ <b>{int(row['price'])} ‚ÇΩ</b>")
    # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–∞–¥–º–∏–Ω ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ)
    buttons = []
    if is_admin:
        buttons.append([
            InlineKeyboardButton(text="‚úè –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"m_edit_{row['id']}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"m_delask_{row['id']}")
        ])
        toggle_text = "üôà –°–∫—Ä—ã—Ç—å" if row["is_active"] else "üëÅ –ü–æ–∫–∞–∑–∞—Ç—å"
        buttons.append([InlineKeyboardButton(text=toggle_text, callback_data=f"m_toggle_{row['id']}")])
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"menu_cat_{row['category']}")])
    await call.message.edit_text(text, reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))

# ---------- –ú–µ–Ω—é: –∞–¥–º–∏–Ω—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—É–¥–∞–ª–µ–Ω–∏–µ/—Å–∫—Ä—ã—Ç–∏–µ/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ) ----------
@dp.callback_query(F.data.startswith("m_delask_"))
async def menu_del_ask(call: types.CallbackQuery):
    item_id = int(call.data.split("_")[-1])
    await call.message.edit_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–ª—é–¥–æ?", reply_markup=confirm_del_kb(item_id, return_to=f"menu_item_{item_id}"))

@dp.callback_query(F.data.startswith("m_del_"))
async def menu_del(call: types.CallbackQuery):
    item_id = int(call.data.split("_")[-1])
    cursor.execute("DELETE FROM menu_items WHERE id=?", (item_id,))
    conn.commit()
    await call.message.edit_text("‚úÖ –ë–ª—é–¥–æ —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_menu_inline(call.from_user.id in ADMINS))

@dp.callback_query(F.data.startswith("m_toggle_"))
async def menu_toggle(call: types.CallbackQuery):
    item_id = int(call.data.split("_")[-1])
    cursor.execute("UPDATE menu_items SET is_active = 1 - is_active WHERE id=?", (item_id,))
    conn.commit()
    cursor.execute("SELECT * FROM menu_items WHERE id=?", (item_id,))
    row = cursor.fetchone()
    await call.message.edit_reply_markup(InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=("üëÅ –ü–æ–∫–∞–∑–∞—Ç—å" if row["is_active"]==0 else "üôà –°–∫—Ä—ã—Ç—å"), callback_data=f"m_toggle_{row['id']}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"menu_cat_{row['category']}")]
    ]))

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ FSM
@dp.callback_query(F.data.startswith("m_edit_"))
async def menu_edit_start(call: types.CallbackQuery, state: FSMContext):
    item_id = int(call.data.split("_")[-1])
    await state.update_data(menu_edit_id=item_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="m_field_title"),
         InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="m_field_description")],
        [InlineKeyboardButton(text="–¶–µ–Ω–∞", callback_data="m_field_price"),
         InlineKeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="m_field_category")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –±–ª—é–¥—É", callback_data=f"menu_item_{item_id}")]
    ])
    await call.message.edit_text("–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)
    await state.set_state(EditMenuFSM.waiting_field)

@dp.callback_query(EditMenuFSM.waiting_field, F.data.startswith("m_field_"))
async def menu_edit_field_selected(call: types.CallbackQuery, state: FSMContext):
    field = call.data.split("_", 2)[2]  # title | description | price | category
    await state.update_data(menu_edit_field=field)
    prompt = {
        "title": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b>:",
        "description": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b>:",
        "price": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é <b>—Ü–µ–Ω—É</b> (—á–∏—Å–ª–æ):",
        "category": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é <b>–∫–∞—Ç–µ–≥–æ—Ä–∏—é</b>:",
    }[field]
    await call.message.edit_text(prompt, reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="adm_menu_manage")]]
    ))
    await state.set_state(EditMenuFSM.waiting_value)

@dp.message(EditMenuFSM.waiting_value)
async def menu_edit_save(message: types.Message, state: FSMContext):
    data = await state.get_data()
    item_id = data["menu_edit_id"]
    field = data["menu_edit_field"]
    new_val = message.text.strip()

    if field == "price":
        try:
            new_val = float(new_val.replace(",", "."))
        except ValueError:
            return await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
    if field in ("title", "description", "category"):
        cursor.execute(f"UPDATE menu_items SET {field}=? WHERE id=?", (new_val, item_id))
    else:
        cursor.execute(f"UPDATE menu_items SET {field}=? WHERE id=?", (new_val, item_id))
    conn.commit()

    # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    cursor.execute("SELECT * FROM menu_items WHERE id=?", (item_id,))
    row = cursor.fetchone()
    is_admin = message.from_user.id in ADMINS
    text = (f"üçΩ <b>{row['title']}</b>\n"
            f"{row['description']}\n"
            f"üí∞ <b>{int(row['price'])} ‚ÇΩ</b>")
    await message.answer(text, reply_markup=main_menu_inline(is_admin))
    await state.clear()

# ---------- –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–Ω–ª–∞–π–Ω-–Ω–∞–≤–∏–≥–∞—Ü–∏—è) ----------
@dp.callback_query(F.data == "main_book")
async def booking_start_cb(call: types.CallbackQuery, state: FSMContext):
    await _ask_step(call, state, "fullname")

# legacy message handler ‚Äî –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∂–∏–º–∞—é—Ç —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É –∏–∑ reply (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)
@dp.message(F.text == "üìÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫")
async def booking_start_msg(message: types.Message, state: FSMContext):
    await _ask_step(message, state, "fullname")

@dp.message(BookingFSM.fullname)
async def booking_fullname(message: types.Message, state: FSMContext):
    await state.update_data(fullname=message.text)
    await _ask_step(message, state, "phone")

@dp.message(BookingFSM.phone)
async def booking_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await _ask_step(message, state, "datetime")

@dp.message(BookingFSM.datetime)
async def booking_datetime(message: types.Message, state: FSMContext):
    await state.update_data(datetime=message.text)
    await _ask_step(message, state, "source")

@dp.message(BookingFSM.source)
async def booking_source(message: types.Message, state: FSMContext):
    await state.update_data(source=message.text)
    await _ask_step(message, state, "notes")

@dp.message(BookingFSM.notes)
async def booking_notes(message: types.Message, state: FSMContext):
    await state.update_data(notes=message.text)
    await _save_booking_and_finish(message, state)

# –ù–∞–≤–∏–≥–∞—Ü–∏—è: –Ω–∞–∑–∞–¥ / –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å / –æ—Ç–º–µ–Ω–∞
@dp.callback_query(F.data.startswith("book_back_"))
async def book_back(call: types.CallbackQuery, state: FSMContext):
    cur_step = call.data.split("_", 2)[2]
    prev_step = PREV.get(cur_step)
    if prev_step is None:
        # –ù–∞–∑–∞–¥ –¥–æ fullname ‚Üí –æ—Ç–º–µ–Ω—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        await state.clear()
        await call.message.edit_text(
            "‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ ‚Äî –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=main_menu_inline(call.from_user.id in ADMINS)
        )
        return
    await _ask_step(call, state, prev_step)

@dp.callback_query(F.data.startswith("book_skip_"))
async def book_skip(call: types.CallbackQuery, state: FSMContext):
    step = call.data.split("_", 2)[2]
    # –°—Ç–∞–≤–∏–º –ø—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
    if step == "source":
        await state.update_data(source="")
        await _ask_step(call, state, "notes")
    elif step == "notes":
        await state.update_data(notes="")
        await _save_booking_and_finish(call, state)
    else:
        await call.answer("–ù–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥", show_alert=True)

@dp.callback_query(F.data == "book_cancel")
async def book_cancel(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_inline(call.from_user.id in ADMINS))

# ---------- –ê–¥–º–∏–Ω: –ø—Ä–æ—Å–º–æ—Ç—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏) ----------
@dp.callback_query(F.data == "adm_view_bookings")
async def view_bookings_cb(call: types.CallbackQuery):
    cursor.execute("SELECT * FROM bookings ORDER BY id DESC")
    rows = cursor.fetchall()
    if not rows:
        return await call.message.edit_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π.", reply_markup=admin_menu_inline() if call.from_user.id in ADMINS else main_menu_inline(False))

    await call.message.edit_text("üìñ –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:")
    for row in rows:
        text = (
            f"üîñ ID: {row['id']}\n"
            f"üë§ {row['fullname']}\n"
            f"üìû {row['phone']}\n"
            f"üìÖ {row['datetime']}\n"
            f"üìå {row['source']}\n"
            f"üìù {row['notes']}"
        )
        await call.message.answer(text, reply_markup=bookings_item_kb(row["id"]))

@dp.callback_query(F.data.startswith("askdel_"))
async def confirm_delete(call: types.CallbackQuery):
    bid = int(call.data.split("_")[1])
    await call.message.edit_text("–£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?", reply_markup=confirm_del_kb(bid, return_to="adm_view_bookings"))

@dp.callback_query(F.data.startswith("delete_"))
async def process_delete(call: types.CallbackQuery):
    booking_id = int(call.data.split("_")[1])
    cursor.execute("DELETE FROM bookings WHERE id=?", (booking_id,))
    conn.commit()
    await call.message.edit_text(f"‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID {booking_id} —É–¥–∞–ª–µ–Ω–æ.", reply_markup=main_menu_inline(call.from_user.id in ADMINS))

# ---------- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (flow) ----------
@dp.callback_query(F.data.startswith("edit_"))
async def process_edit(call: types.CallbackQuery, state: FSMContext):
    booking_id = int(call.data.split("_")[1])
    await state.update_data(edit_id=booking_id)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    cursor.execute("SELECT * FROM bookings WHERE id=?", (booking_id,))
    row = cursor.fetchone()
    if not row:
        return await call.message.edit_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu_inline(call.from_user.id in ADMINS))

    await call.message.edit_text(
        f"‚úè –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #{booking_id}\n\n"
        f"üë§ {row['fullname']}\n"
        f"üìû {row['phone']}\n"
        f"üìÖ {row['datetime']}\n"
        f"üìå {row['source']}\n"
        f"üìù {row['notes']}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ <b>–∏–º—è</b> (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')"
    )
    await state.set_state(EditBookingFSM.fullname)

@dp.message(EditBookingFSM.fullname)
async def edit_fullname(message: types.Message, state: FSMContext):
    data = await state.get_data()
    booking_id = data["edit_id"]

    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        cursor.execute("UPDATE bookings SET fullname=? WHERE id=?", (message.text, booking_id))
        conn.commit()

    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    await state.set_state(EditBookingFSM.phone)

@dp.message(EditBookingFSM.phone)
async def edit_phone(message: types.Message, state: FSMContext):
    data = await state.get_data()
    booking_id = data["edit_id"]

    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        cursor.execute("UPDATE bookings SET phone=? WHERE id=?", (message.text, booking_id))
        conn.commit()

    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    await state.set_state(EditBookingFSM.datetime)

@dp.message(EditBookingFSM.datetime)
async def edit_datetime(message: types.Message, state: FSMContext):
    data = await state.get_data()
    booking_id = data["edit_id"]

    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        cursor.execute("UPDATE bookings SET datetime=? WHERE id=?", (message.text, booking_id))
        conn.commit()

    await message.answer("üìå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    await state.set_state(EditBookingFSM.source)

@dp.message(EditBookingFSM.source)
async def edit_source(message: types.Message, state: FSMContext):
    data = await state.get_data()
    booking_id = data["edit_id"]

    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        cursor.execute("UPDATE bookings SET source=? WHERE id=?", (message.text, booking_id))
        conn.commit()

    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    await state.set_state(EditBookingFSM.notes)

@dp.message(EditBookingFSM.notes)
async def edit_notes(message: types.Message, state: FSMContext):
    data = await state.get_data()
    booking_id = data["edit_id"]

    if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        cursor.execute("UPDATE bookings SET notes=? WHERE id=?", (message.text, booking_id))
        conn.commit()

    await message.answer(f"‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ID {booking_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ.")
    await state.clear()

# ---------- –ê–¥–º–∏–Ω: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é (—Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞) ----------
@dp.callback_query(F.data == "adm_menu_manage")
async def adm_menu_manage(call: types.CallbackQuery):
    if call.from_user.id not in ADMINS:
        return await call.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–ª—é–¥–æ", callback_data="m_add")],
        [InlineKeyboardButton(text="–í—Å–µ –±–ª—é–¥–∞", callback_data="m_list")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="main_admin")]
    ])
    await call.message.edit_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é:", reply_markup=kb)

@dp.callback_query(F.data == "m_list")
async def m_list(call: types.CallbackQuery):
    if call.from_user.id not in ADMINS:
        return await call.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    cursor.execute("SELECT * FROM menu_items ORDER BY id DESC")
    rows = cursor.fetchall()
    if not rows:
        return await call.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –±–ª—é–¥.", reply_markup=admin_menu_inline())
    await call.message.edit_text("–°–ø–∏—Å–æ–∫ –±–ª—é–¥:")
    for r in rows:
        await call.message.answer(f"{r['id']}. {r['title']} ‚Äî {int(r['price'])} ‚ÇΩ", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"m_edit_{r['id']}"),
            InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"m_delask_{r['id']}")
        ]]))

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥–∞ (—á–µ—Ä–µ–∑ FSM) ‚Äî –±–∞–∑–æ–≤—ã–π flow
@dp.callback_query(F.data == "m_add")
async def m_add_start(call: types.CallbackQuery, state: FSMContext):
    if call.from_user.id not in ADMINS:
        return await call.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
    await state.update_data(new_item={})
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="adm_menu_manage")]]))
    await state.set_state(EditMenuFSM.waiting_field)  # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å—Ç—É–ø–µ–Ω–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

@dp.message(EditMenuFSM.waiting_field)
async def m_add_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    new_item = data.get("new_item", {})
    if "title" not in new_item:
        new_item["title"] = message.text.strip()
        await state.update_data(new_item=new_item)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="adm_menu_manage")]]))
        return
    if "description" not in new_item:
        if message.text.strip() == "-":
            new_item["description"] = ""
        else:
            new_item["description"] = message.text.strip()
        await state.update_data(new_item=new_item)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (—á–∏—Å–ª–æ):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="adm_menu_manage")]]))
        return
    if "price" not in new_item:
        try:
            price = float(message.text.replace(",", "."))
        except:
            return await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        new_item["price"] = price
        await state.update_data(new_item=new_item)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ï–¥–∞ / –ù–∞–ø–∏—Ç–∫–∏ / –î–µ—Å–µ—Ä—Ç—ã):", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="adm_menu_manage")]]))
        return
    if "category" not in new_item:
        new_item["category"] = message.text.strip()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        cursor.execute("INSERT INTO menu_items(title, description, price, category) VALUES(?,?,?,?)",
                       (new_item["title"], new_item["description"], new_item["price"], new_item["category"]))
        conn.commit()
        await message.answer("‚úÖ –ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.", reply_markup=admin_menu_inline())
        await state.clear()
        return

# ---------- –ü—Ä–æ—á–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ message-—Ö–µ–Ω–¥–ª–µ—Ä—ã ----------
@dp.message(F.text == "‚öô –ê–¥–º–∏–Ω –º–µ–Ω—é")
async def admin_menu_msg(message: types.Message):
    if message.from_user.id not in ADMINS:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
    await message.answer("‚öô –ê–¥–º–∏–Ω –º–µ–Ω—é", reply_markup=admin_menu_inline())

# legacy compatibility for "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" reply buttons
@dp.message(F.text == "üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
async def back_to_menu_legacy(message: types.Message):
    is_admin = message.from_user.id in ADMINS
    await message.answer("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_inline(is_admin))

# ========================== RUN ==========================
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())